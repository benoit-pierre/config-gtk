#!/usr/bin/env ruby

require 'find'
require 'fileutils'

begin
  has_gtk = require 'gtk2'
rescue LoadError
  has_gtk = false
end

COLORNAMES = {
  0xf0f8ff => 'alice blue',
  0xfaebd7 => 'antique white',
  0x00ffff => 'aqua',
  0x7fffd4 => 'aquamarine',
  0xf0ffff => 'azure',
  0xf5f5dc => 'beige',
  0xffe4c4 => 'bisque',
  0x000000 => 'black',
  0xffebcd => 'blanched almond',
  0x0000ff => 'blue',
  0x8a2be2 => 'blue violet',
  0xa52a2a => 'brown',
  0xdeb887 => 'burlywood',
  0x5f9ea0 => 'cadet blue',
  0x7fff00 => 'chartreuse',
  0xd2691e => 'chocolate',
  0xff7f50 => 'coral',
  0x6495ed => 'cornflower',
  0xfff8dc => 'cornsilk',
  0xdc143c => 'crimson',
  0x00ffff => 'cyan',
  0x00008b => 'dark blue',
  0x008b8b => 'dark cyan',
  0xb8860b => 'dark goldenrod',
  0xa9a9a9 => 'dark gray',
  0x006400 => 'dark green',
  0xbdb76b => 'dark khaki',
  0x8b008b => 'dark magenta',
  0x556b2f => 'dark olive green',
  0xff8c00 => 'dark orange',
  0x9932cc => 'dark orchid',
  0x8b0000 => 'dark red',
  0xe9967a => 'dark salmon',
  0x8fbc8f => 'dark sea green',
  0x483d8b => 'dark slate blue',
  0x2f4f4f => 'dark slate gray',
  0x00ced1 => 'dark turquoise',
  0x9400d3 => 'dark violet',
  0xff1493 => 'deep pink',
  0x00bfff => 'deep sky blue',
  0x696969 => 'dim gray',
  0x1e90ff => 'dodger blue',
  0xb22222 => 'firebrick',
  0xfffaf0 => 'floral white',
  0x228b22 => 'forest green',
  0xff00ff => 'fuchsia',
  0xdcdcdc => 'gainsboro',
  0xf8f8ff => 'ghost white',
  0xffd700 => 'gold',
  0xdaa520 => 'goldenrod',
  0xbebebe => 'gray',
  0x00ff00 => 'green',
  0xadff2f => 'green yellow',
  0xf0fff0 => 'honeydew',
  0xff69b4 => 'hot pink',
  0xcd5c5c => 'indian red',
  0x4b0082 => 'indigo',
  0xfffff0 => 'ivory',
  0xf0e68c => 'khaki',
  0xe6e6fa => 'lavender',
  0xfff0f5 => 'lavender blush',
  0x7cfc00 => 'lawn green',
  0xfffacd => 'lemon chiffon',
  0xadd8e6 => 'light blue',
  0xf08080 => 'light coral',
  0xe0ffff => 'light cyan',
  0xfafad2 => 'light goldenrod',
  0xd3d3d3 => 'light gray',
  0x90ee90 => 'light green',
  0xffb6c1 => 'light pink',
  0xffa07a => 'light salmon',
  0x20b2aa => 'light sea green',
  0x87cefa => 'light sky blue',
  0x778899 => 'light slate gray',
  0xb0c4de => 'light steel blue',
  0xffffe0 => 'light yellow',
  0x32cd32 => 'lime green',
  0xfaf0e6 => 'linen',
  0xff00ff => 'magenta',
  0xb03060 => 'maroon',
  0x66cdaa => 'medium aquamarine',
  0x0000cd => 'medium blue',
  0xba55d3 => 'medium orchid',
  0x9370db => 'medium purple',
  0x3cb371 => 'medium sea green',
  0x7b68ee => 'medium slate blue',
  0x00fa9a => 'medium spring green',
  0x48d1cc => 'medium turquoise',
  0xc71585 => 'medium violet red',
  0x191970 => 'midnight blue',
  0xf5fffa => 'mint cream',
  0xffe4e1 => 'misty rose',
  0xffe4b5 => 'moccasin',
  0xffdead => 'navajo white',
  0x000080 => 'navy',
  0xfdf5e6 => 'old lace',
  0x808000 => 'olive',
  0x6b8e23 => 'olive drab',
  0xffa500 => 'orange',
  0xff4500 => 'orange red',
  0xda70d6 => 'orchid',
  0xeee8aa => 'pale goldenrod',
  0x98fb98 => 'pale green',
  0xafeeee => 'pale turquoise',
  0xdb7093 => 'pale violet red',
  0xffefd5 => 'papaya whip',
  0xffdab9 => 'peach puff',
  0xcd853f => 'peru',
  0xffc0cb => 'pink',
  0xdda0dd => 'plum',
  0xb0e0e6 => 'powder blue',
  0xa020f0 => 'purple',
  0xff0000 => 'red',
  0xbc8f8f => 'rosy brown',
  0x4169e1 => 'royal blue',
  0x8b4513 => 'saddle brown',
  0xfa8072 => 'salmon',
  0xf4a460 => 'sandy brown',
  0x2e8b57 => 'sea green',
  0xfff5ee => 'seashell',
  0xa0522d => 'sienna',
  0x87ceeb => 'sky blue',
  0x6a5acd => 'slate blue',
  0x708090 => 'slate gray',
  0xfffafa => 'snow',
  0x00ff7f => 'spring green',
  0x4682b4 => 'steel blue',
  0xd2b48c => 'tan',
  0x008080 => 'teal',
  0xd8bfd8 => 'thistle',
  0xff6347 => 'tomato',
  0x40e0d0 => 'turquoise',
  0xee82ee => 'violet',
  0xf5deb3 => 'wheat',
  0xffffff => 'white',
  0xf5f5f5 => 'white smoke',
  0xffff00 => 'yellow',
  0x9acd32 => 'yellow green',
}

# RGB to HSL converter | color conversion http://www.rapidtables.com/convert/color/rgb-to-hsl.htm
# @param r [Integer] red 0..255
# @param g [Integer] green 0..255
# @param b [Integer] blue 0..255
# @return [Integer[]] [hue, lightness, saturation]
#   hue 0..360 degree
#   lightness 0..100 %
#   saturation 0..100 %
def rgb_to_hls r, g, b
  r /= 255.0
  g /= 255.0
  b /= 255.0
  cmax = [r, g, b].max
  cmin = [r, b, g].min
  d = cmax - cmin
  l = (cmax + cmin) / 2
  return [0, (l * 100).floor, 0] if d == 0
  h = case cmax
      when r then 60 * ((g - b) / d % 6)
      when g then 60 * ((b - r) / d + 2)
      else        60 * ((r - g) / d + 4)
      end
  [ h,
    l * 100,
    d / (1 - (l * 2 - 1).abs) * 100
  ].map &:floor
end

# HSL to RGB conversion | color conversion http://www.rapidtables.com/convert/color/hsl-to-rgb.htm
# @param h [Integer] hue 0..360 degree
# @param l [Integer] lightness 0..100 %
# @param s [Integer] saturation 0..100 %
# @return [Integer[]] [red, green, blue]
#   red 0..255
#   green 0..255
#   blue 0..255
def hls_to_rgb h, l, s
  s /= 100.0
  l /= 100.0
  c = (1 - (l * 2 - 1).abs) * s
  x = c * (1 - ((h / 60.0) % 2 - 1).abs)
  m = l - c / 2
  r, g, b = case
            when h < 60  then [c, x, 0]
            when h < 120 then [x, c, 0]
            when h < 180 then [0, c, x]
            when h < 240 then [0, x, c]
            when h < 300 then [x, 0, c]
            else              [c, 0, x]
            end
  [r, g, b].map{|channel| ((channel + m) * 255).ceil }
end

Color = Struct.new(:type, :r, :g, :b, :a)

class Color

  def negate
    if :float == self.type then
      return Color.new(
        self.type,
        1.0 - self.r,
        1.0 - self.g,
        1.0 - self.b,
      )
    end
    return Color.new(
      self.type,
      255 - self.r,
      255 - self.g,
      255 - self.b,
      self.a
    )
  end

  def invert
    if :float == self.type then
      h, l, s = rgb_to_hls(self.r * 255, self.g * 255, self.b * 255)
      r, g, b = hls_to_rgb(h, 100 - l, s)
      return Color.new(self.type, r / 255.0, g / 255.0, b / 255.0)
    end
    h, l, s = rgb_to_hls(self.r, self.g, self.b)
    r, g, b = hls_to_rgb(h, 100 - l, s)
    return Color.new(self.type, r, g, b, self.a)
  end

  def to_s
    case self.type
    when :hex
      '#%02x%02x%02x' % [self.r, self.g, self.b]
    when :rgb
      'rgb (%u, %u, %u)' % [self.r, self.g, self.b]
    when :rgba
      'rgba (%u, %u, %u, %.2f)' % [self.r, self.g, self.b, self.a]
    when :float
      '{ %.2f, %.2f, %.2f }' % [self.r, self.g, self.b]
    end
  end

  def to_rgb
    (self.r << 16) + (self.g << 8) + self.b
  end

  def self.from_gdk(c)
    Color.new(:rgb, c.red / 257, c.green / 257, c.blue / 257)
  end

end

module Image

  def self.negate(src, dst)
    system('convert', src, '-negate', dst)
  end

  def self.invert(src, dst)
    system('convert', src, '-colorspace', 'HSL', '-channel', 'Luminance', '-negate', dst)
  end

end

exit 1 unless (1..3).include?(ARGV.size)

input = File.expand_path(ARGV.shift)
output = File.expand_path(ARGV.shift)
mode = ARGV.size > 0 ? ARGV.shift : :invert

Find.find(input) do |src_path|

  next unless File.file?(src_path)

  entry = src_path[input.size+1..-1]
  dst_path = File.join(output, entry)
  FileUtils.mkdir_p(File.dirname(dst_path))

  case File.basename(src_path)
  when 'gtkrc'
  when 'gtk.css'
  when /\.(css|ini|rc)$/
  when /\.(png|jpg)$/
    puts "converting #{entry}"
    Image.send(mode, src_path, dst_path)
    next
  else
    puts "copying #{entry}"
    FileUtils.cp(src_path, dst_path)
    next
  end

  puts "converting #{entry}"

  src = File.open(src_path, 'r')
  dst = File.open(dst_path, 'w')

  while src.gets

    $_.gsub!(/\B#([0-9A-Fa-f]{6}\b)/) do |match|
      c = Color.new(:hex, *$1.scan(/../).map { |str| str.to_i(16) })
      c.send(mode)
    end

    $_.gsub!(/\B#([0-9A-Fa-f]{3}\b)/) do |match|
      c = Color.new(:hex, *$1.scan(/./).map { |str| (str * 2).to_i(16) })
      c.send(mode)
    end

    $_.gsub!(/\brgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/) do |match|
      c = Color.new(:rgb, $1.to_i, $2.to_i, $3.to_i)
      c.send(mode)
    end

    $_.gsub!(/\brgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([0-9.]+)\s*\)/) do |match|
      c = Color.new(:rgba, $1.to_i, $2.to_i, $3.to_i, $4.to_f)
      c.send(mode)
    end

    $_.gsub!(/{\s*([0-9.]+)\s*,\s*([0-9.]+)\s*,\s*([0-9.]+)\s*}/) do |match|
      c = Color.new(:float, $1.to_f, $2.to_f, $3.to_f, $4.to_f)
      c.send(mode)
    end

    $_.gsub!(/\b([a-z]\w+)\b/) do |match|
      begin
        gdk_color = Gdk::Color.parse($1)
      rescue ArgumentError
        gdk_color = nil
      end
      if gdk_color then
        c = Color.from_gdk(gdk_color)
        c = c.send(mode)
        name = COLORNAMES.fetch(c.to_rgb, nil)
        begin
          gdk_color = Gdk::Color.parse(name)
        rescue ArgumentError
          gdk_color = nil
        end if name
        if name and gdk_color
          nc = Color.from_gdk(gdk_color)
          name = nil unless nc.to_rgb == c.to_rgb
        end
        name || c
      else
        $1
      end
    end if has_gtk

    dst.puts($_)

  end

end

